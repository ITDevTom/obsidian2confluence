"\"\"\"\nShared pydantic models and enumerations used across the application.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom datetime import datetime\nfrom enum import Enum\nfrom pathlib import Path\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel, Field\n\n\nclass FrontmatterMetadata(BaseModel):\n    \"\"\"Represents parsed YAML frontmatter from an Obsidian note.\"\"\"\n\n    title: Optional[str] = None\n    labels: List[str] = Field(default_factory=list)\n    parent: Optional[str] = None\n    exclude: bool = False\n    page_id: Optional[str] = None\n\n\nclass VaultNote(BaseModel):\n    \"\"\"A fully parsed note in the Obsidian vault.\"\"\"\n\n    path: Path\n    relative_path: str\n    title: str\n    frontmatter: FrontmatterMetadata\n    content: str\n    sha256: str\n\n\nclass RemotePage(BaseModel):\n    \"\"\"Remote Confluence page metadata.\"\"\"\n\n    page_id: str\n    title: str\n    parent_page_id: Optional[str]\n    version: int\n    last_updated: Optional[datetime]\n\n\nclass SyncAction(str, Enum):\n    \"\"\"Possible outcomes for a note sync operation.\"\"\"\n\n    CREATE = \"create\"\n    UPDATE = \"update\"\n    SKIP = \"skip\"\n    CONFLICT = \"conflict\"\n\n\nclass SyncPlanEntry(BaseModel):\n    \"\"\"Action plan describing how a note should be processed.\"\"\"\n\n    note: VaultNote\n    action: SyncAction\n    target_page_id: Optional[str] = None\n    parent_page_id: Optional[str] = None\n    reason: Optional[str] = None\n    labels: List[str] = Field(default_factory=list)\n\n\nclass ConflictRecord(BaseModel):\n    \"\"\"Represents a detected sync conflict for reporting.\"\"\"\n\n    file_path: Path\n    page_id: str\n    reason: str\n    detected_at: datetime\n\n\nclass SyncSummary(BaseModel):\n    \"\"\"Aggregated statistics for a sync execution.\"\"\"\n\n    created: int = 0\n    updated: int = 0\n    skipped: int = 0\n    conflicts: int = 0\n\n    def register(self, action: SyncAction) -> None:\n        if action == SyncAction.CREATE:\n            self.created += 1\n        elif action == SyncAction.UPDATE:\n            self.updated += 1\n        elif action == SyncAction.SKIP:\n            self.skipped += 1\n        elif action == SyncAction.CONFLICT:\n            self.conflicts += 1\n\n*** End Patch***
